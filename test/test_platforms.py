"""
We use a mapping generated by a version with triggers
allthethings.json and compare this with the results we get
from platforms.py
"""
import json
import os
import pytest

import mozci.sources.allthethings
import mozci.platforms


def complex_data():
    filepath = os.path.join(
        os.path.dirname(os.path.abspath(__file__)),
        "test_platforms.json"
    )
    with open(filepath, 'r') as f:
        reference_builders_info = json.load(f)

    # Build jobs should return themselves
    build_jobs = set(reference_builders_info.values())
    for build_job in build_jobs:
        reference_builders_info[build_job] = build_job

    builders_data = mozci.sources.allthethings._fetch_json()['builders']

    tests = []
    for builder in reference_builders_info.keys():
        properties = builders_data[builder]['properties']
        # If we can't guess a repo_name we can't test associated_build_jobs
        try:
            repo_name = properties['repo_path'].split('/')[-1]
        except:
            continue

        expected = reference_builders_info[builder]
        tests.append((builder, repo_name, expected))

    return tests


@pytest.mark.parametrize("builder,repo_name,expected", complex_data())
def test_builders(builder, repo_name, expected):
    obtained = mozci.platforms.associated_build_job(builder, repo_name)
    assert obtained == expected, \
        'obtained: "%s", expected "%s"' % (obtained, expected)
